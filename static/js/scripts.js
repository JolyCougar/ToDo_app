const dateDisplay = document.getElementById('dateDisplay');
const incompleteCount = document.getElementById('incompleteCount');
const taskList = document.getElementById('taskList');
const completedList = document.getElementById('completedList');
const cookieBanner = document.getElementById('cookieBanner');
const acceptCookiesButton = document.getElementById('acceptCookies');
const toggleCompletedListButton = document.getElementById('toggleCompletedList');
const addTaskButton = document.getElementById('addTaskButton');
const taskInput = document.getElementById('taskInput');
const taskDescription = document.getElementById('taskDescription');
const modal = document.getElementById('modal');
const closeModal = document.getElementById('closeModal');
const confirmAddTask = document.getElementById('confirmAddTask');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const settingsButton = document.querySelector('.settings');
const settingsModal = document.getElementById('settingsModal');
const closeSettingsModal = document.getElementById('closeSettingsModal');
const settingsForm = document.getElementById('settingsForm');
const fontSelect = document.getElementById('fontSelect');
const fontSizeSelect = document.getElementById('fontSizeSelect');
const showCompletedTasksCheckbox = document.getElementById('showCompletedTasks');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
const currentDate = new Date();
dateDisplay.textContent = currentDate.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
updateIncompleteCount();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
acceptCookiesButton.addEventListener('click', hideCookieBanner);
toggleCompletedListButton.addEventListener('click', toggleCompletedList);
addTaskButton.addEventListener('click', showModal);
closeModal.addEventListener('click', hideModal);
window.addEventListener('click', hideModalOnClickOutside);
document.getElementById('taskForm').addEventListener('submit', addTask);
taskList.addEventListener('change', handleTaskChange);
taskList.addEventListener('click', handleDeleteTask);
completedList.addEventListener('click', handleDeleteTask);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settingsButton.addEventListener('click', showSettingsModal);
closeSettingsModal.addEventListener('click', hideSettingsModal);
settingsForm.addEventListener('submit', saveSettings);

// –§—É–Ω–∫—Ü–∏–∏
function hideCookieBanner() {
    cookieBanner.style.display = 'none';
}

function toggleCompletedList() {
    const isHidden = completedList.classList.contains('show');
    if (isHidden) {
        completedList.classList.remove('show');
        toggleCompletedListButton.textContent = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
    } else {
        completedList.classList.add('show');
        toggleCompletedListButton.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
    }
}

function showModal() {
    modal.style.display = 'flex';
    taskInput.focus();
}

function hideModal() {
    modal.style.display = 'none';
}

function hideModalOnClickOutside(event) {
    if (event.target === modal) {
        hideModal();
    }
}

function showSettingsModal() {
    settingsModal.style.display = 'flex';
}

function hideSettingsModal() {
    settingsModal.style.display = 'none';
}

function addTask(event) {
    event.preventDefault();
    const taskName = taskInput.value.trim();
    const taskDescriptionText = taskDescription.value.trim();

    if (!taskName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');
        return;
    }

    fetch('/add-task/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        },
        body: JSON.stringify({name: taskName, description: taskDescriptionText})
    })
        .then(handleResponse)
        .then(data => {
            if (data.success) {
                addTaskToDOM(data.task_id, taskName, taskDescriptionText);
                taskInput.value = '';
                taskDescription.value = '';
                hideModal();
                updateIncompleteCount();
            } else {
                alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + data.error);
            }
        })
        .catch(handleError);
}

function handleResponse(response) {
    if (!response.ok) {
        throw new Error('Network response was not ok');
    }
    return response.json();
}

function handleError(error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
}

function addTaskToDOM(taskId, taskName, taskDescriptionText) {
    const newTaskItem = createTaskElement(taskId, taskName, taskDescriptionText);
    taskList.appendChild(newTaskItem);
}

function createTaskElement(taskId, taskName, taskDescriptionText) {
    const taskItem = document.createElement('li');
    taskItem.className = 'task-item';
    taskItem.setAttribute('data-task-id', taskId);
    taskItem.innerHTML = `
        <input type="checkbox" id="task${taskId}" complete="false">
        <label for="task${taskId}">${taskName}</label>
        <span class="task-details">
            <span>${taskDescriptionText}</span>
        </span>
        <button class="delete-task" aria-label="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É">üóëÔ∏è</button>
    `;
    return taskItem;
}

function updateIncompleteCount() {
    const checkboxes = taskList.querySelectorAll('input[type="checkbox"]');
    const completedCount = Array.from(checkboxes).filter(checkbox => checkbox.checked).length;
    incompleteCount.textContent = checkboxes.length - completedCount; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—á–µ—Ç—á–∏–∫–∞
}

function handleTaskChange(event) {
    if (event.target.type === 'checkbox') {
        const taskItem = event.target.closest('.task-item');
        const taskId = taskItem.getAttribute('data-task-id');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        fetch(`/update-task/${taskId}/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify({complete: event.target.checked})
        })
            .then(handleResponse)
            .then(data => {
                if (data.success) {
                    if (event.target.checked) {
                        moveToCompletedList(taskItem, taskId);
                    } else {
                        moveToTaskList(taskItem, taskId);
                    }
                    updateIncompleteCount();
                } else {
                    alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + data.error);
                }
            })
            .catch(handleError);
    }
}

function moveToCompletedList(taskItem, taskId) {
    const completedItem = createCompletedElement(taskId, taskItem);
    completedList.appendChild(completedItem);
    taskItem.remove();
}

function moveToTaskList(taskItem, taskId) {
    const newTaskItem = createTaskElement(taskId, taskItem.querySelector('label').textContent, taskItem.querySelector('.task-details span').textContent);
    taskList.appendChild(newTaskItem);
    taskItem.remove();
}

function createCompletedElement(taskId, taskItem) {
    const completedItem = document.createElement('li');
    completedItem.className = 'completed-item';
    completedItem.setAttribute('data-task-id', taskId);
    completedItem.innerHTML = `
        <label class="completed-label">${taskItem.querySelector('label').textContent}</label>
        <span class="completed-label">${taskItem.querySelector('.task-details span').textContent}</span>
        <button class="delete-task" aria-label="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É">üóëÔ∏è</button>
    `;
    return completedItem;
}

function handleDeleteTask(event) {
    if (event.target.classList.contains('delete-task')) {
        const taskItem = event.target.closest('[data-task-id]');
        const taskId = taskItem.getAttribute('data-task-id');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        fetch(`/delete-task/${taskId}/`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
            .then(handleResponse)
            .then(data => {
                if (data.success) {
                    taskItem.remove();
                    updateIncompleteCount();
                } else {
                    alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + data.error);
                }
            })
            .catch(handleError);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∑–∞–¥–∞—á–∞–º, –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
document.querySelectorAll('.task-item').forEach(taskItem => {
    const taskId = taskItem.getAttribute('data-task-id');
    addDeleteTaskHandler(taskItem, taskId);
});

// –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º
document.querySelectorAll('.completed-item').forEach(completedItem => {
    const taskId = completedItem.getAttribute('data-task-id');
    addDeleteTaskHandler(completedItem, taskId);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function addDeleteTaskHandler(taskItem, taskId) {
    const deleteButton = taskItem.querySelector('.delete-task');
    deleteButton.addEventListener('click', function () {
        fetch(`/delete-task/${taskId}/`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
            .then(handleResponse)
            .then(data => {
                if (data.success) {
                    taskItem.remove();
                    updateIncompleteCount();
                } else {
                    alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + data.error);
                }
            })
            .catch(handleError);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings(event) {
    event.preventDefault();
    const selectedFont = fontSelect.value;
    const selectedFontSize = fontSizeSelect.value;
    const showCompletedTasks = showCompletedTasksCheckbox.checked;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    localStorage.setItem('font', selectedFont);
    localStorage.setItem('fontSize', selectedFontSize);
    localStorage.setItem('showCompletedTasks', showCompletedTasks);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    applySettings();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    hideSettingsModal();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
showCompletedTasksCheckbox.addEventListener('change', toggleCompletedTasksVisibility);

function toggleCompletedTasksVisibility() {
    const completedSection = document.querySelector('section:nth-of-type(2)'); // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ü–∏—é —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    if (showCompletedTasksCheckbox.checked) {
        completedSection.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    } else {
        completedSection.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    }
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function () {
    applySettings(); // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    toggleCompletedTasksVisibility(); // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function applySettings() {
    const font = localStorage.getItem('font');
    const fontSize = localStorage.getItem('fontSize');
    const showCompletedTasks = localStorage.getItem('showCompletedTasks') === 'true';

    if (font) {
        document.body.style.fontFamily = font;
        fontSelect.value = font; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
    }
    if (fontSize) {
        document.body.style.fontSize = fontSize + 'px';
        fontSizeSelect.value = fontSize; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
    }
    showCompletedTasksCheckbox.checked = showCompletedTasks;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    toggleCompletedTasksVisibility();
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = applySettings;

